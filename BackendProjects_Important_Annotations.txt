Important Annotations Used :
	@RestController :  
		-> It self is annotated with @Controller and @ResponseBody. 
		-> Applied to a class to mark that the class is a Request Handler.
		->	It is used to create RestFul Web services using Spring MVC.
		-> This takes care of mapping request data to defined request handler method.
		-> It also returns the data in JSON/XML format as response.
		-> Dependencies of @RestController - Spring MVC, Jackson and JAXB libraries. Jackson to Support JSON response and JAXB to support XML Response.
		-> Difference between @controller and @restcontroller. 
			-> Both are used to define a class as web controller.
			-> Controller is used when we want to return an HTTP file.
			-> RestController is used to develop Rest APIs and return JSON or XML.
			-> We can use @controller with @ResponseBody to return JSON or XML.
			-> RestController is basically combination of Controller and ResponseBody
	
	@RequestMapping - Used to map request to controller methods.
		-> It has attributes to match by URL, HTTP method, request params, headers and media types.
		-> Can be used at class level to express shared mappings or at method level to narrow down a specific endpoint.
		-> This can include params.
		-> Params can include patterns for match.
		-> @GetMapping, @PostMapping @PutMapping @DeleteMapping and @PatchMapping are HTTP method specific variants of @RequestMapping.
		-> Can use @RequestMapping instead of method specific mapping but it is advisable to use method specific mapping.
	-> @PathVariable - Used to handle variables in the request URI mapping.
		-> Path variable can be set to not mandatory - 
		methodName (@PathVariable(required = false) String id)
		-> Path vairable can be simple datatypes or Map too.
	-> @Getter and @Setter at class level on DTO to create getters and setters without making the code lengthy.
	-> @Data at class level and it will create getters, setters, no arg constructor, all arugument constructor and toString method for the class.
	-> @RequestBody - Annotation maps the HttpRequest body to a transfer or domain object, enabling automatic deserialization. NOT NEEDED SINCE SPRING 4.X AS @RestController IS ENOUGH
		-> Spring automatically deserializes the JSON into a java type
	-> @ResponseBody - Annotation tells a controller that the object returned is automatically serialized into JSON and passed back into the HttpResponse object.
		-> Here an object is returned and the object is mapped to JSON where key is the variable name and value is the value in the object.
		-> In the @GetMapping or @PostMapping etc, we can use produces and tell the type of response this needs to produce. Is it XML or JSON.
	-> @MappedSuperClass - Allows to extend a parent class without creating an entity for it in DB. 
	-> ComponentScan - Use this to scan for controllers in different packages from Main File
	-> @RequestParam - Path variable is use to pass path parameters in the URL. If we want to pass query parameters ?name=Saad&limit=5. We can do this using @RequestParam annotation
		-> RequestParam also supports name change where if in the url we have the param called xyz but we want to use the param as name. We can do something like this methodName(@RequestParam (name = "xyz") String name). Here the query param passed as xyz will be used as name in the method.
		-> Also supports required = false which allows to run the method if that param is not passed.