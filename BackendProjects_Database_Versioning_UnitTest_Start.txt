HomeWork :
	-> Implement Database Versoning
	https://www.baeldung.com/database-migrations-with-flyway
	
	Ask This - In the PRD document, for the User Service there is a requirement to implement login via social media profiles.  Are we going to do this in future classes or do we need to implement this on our own ?
	
Database Versoning : 
	-> You are executing some steps during a development.
	-> There are 4 steps, everything went fine till V3 but things went wrong from step 3 to step 4.
	-> You will need to revert the tasks done from step 3 to step 4.
	-> For these you need the tasks executed from step 3 to step 4.
	-> This is versioning and is like what is used in GIT.
	-> Something similar is done at the DB layer.
	-> Any time a DDL command is executed on any table a new version for the table is created.
	-> Almost all RDBMS have versioning implemented.
	
	-> Database Migrations are used to implement Versoning in Database.
	
		-> The DDL command is stored corresponding to each new version.
		-> For each migration version there are 2 files created :
			up_***.Sql - any change made to the table (alter, add drop, etc). Executing this will add the expected change.
			down_***.sql - the rollback query for the change implemented in the up query. Executing this will remove the change.
			
		-> For versioning we have to take care of the files manually. or ateast tell our framework that we want to see these changes.
		
		
	Advantages of Versoning :
		-> Like GIT we have checkpoints.
		-> Rollback is easy.
		
	
	How to enable schema migrations  ?
		-> Use Flyway or Liquibase.
		-> These libraries check version of your database 
		-> At the start of the application all version files are run one by one and at the end the table is verfied wit the model if the model matches the table the application starts, else it fails.
		
		Steps :
			-> Add flyway to projects.
			-> Add a folder in /resources. add /db/migration folder. 
			-> Add all .SQL files in this folder.
			-> Run you application.
			
	How do we test our changes ? 
		-> After creating the version file.
		-> Start the application and run it. It should be fine.
		-> Next add any attribute in you model. and for that add a new version_up and version_down file. 
		-> If version files are correct your application will start else it will fail.
		
		
Unit Testing :

	-> Unit testing for each method :
		-> Should cover all test cases which include happy test casses and bad test cases.
			-> Bad testcases include :
				-> Exception testcases : null pointer, 
				-> Error test cases : user not found.
				
	-> We need to add test cases because we need to define the funcationlity of a use case/ method. And if tomorrow any test cases that need not fail fail, that means a core funcationlity that should not be affected has been changed. 
	
	-> Unit test cases are written for each and every function.