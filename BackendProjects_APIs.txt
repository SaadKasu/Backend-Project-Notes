Homework :
	1.) Practice creating an app with spring.
	2.) Read what protobuff is ?
	3.) Do class design and schema design for product service before next class.
	4.) https://aws.amazon.com/compare/the-difference-between-soap-rest/#:~:text=The%20two%20applications%20share%20data,exchange%20data%20in%20multiple%20formats
	5.) https://learn.microsoft.com/en-us/azure/architecture/best-practices/api-design
	6.) Define Controllers in Sring.

-> Maven and Gradle are examples of buildtools. They help us do dependency management.
-> Companies have central repo of packages. The group used while creating spring project using com.
-> If we define the class as restcontroller we don't need to create an object of the class.
-> Controller is entry point of the code
-> @GetMapping("/") - > If no endpoint is given the method defined with this annotation will be executed.


APIs :
	-> Define how one should connect/communicate with the application.
	-> If you want someone to communicate with your service, develop APIs for them.
	-> When 2 applications are interacting with each other there needs to be an agreement between 2 apps on what is the payload, what is the return, etc. This is a contract in APIs.
	
	
	ReST API : 
		-> Representational State Transfer APIs.
		-> Rest are guidelines to create APIs to ensure standardization and makes it easier ot integrate systems.
		-> Rest tells us how apis should be structured.
		-> What kind of APIs ?
		-> Every request is self sufficent
		-> Properties of CRUD APIs
		1.) APIs should be defined around resources (entity).
			a.) Product APi should deal with product. User API should deal with user, etc.
			APIs should not have the type (get, put, post and delete) in the URI. The URI should only have the name of the entity.
			b.) The type of the API should depend on the action we are performing with the API.
			GET - Read data
			POST - Write/Create data
			PUT - Update Data
			DELETE - Delete data
			PATCH - update data.
				-> PATCH vs PUT - use patch when we want to update only 1 attribute we use patch else if we want to fix complete or most of the row/s we use PUT.
			c.) Nomenclature of the API should not include the type of API.
			d.) Path Parameter : Parameters passed as part of URI. Example - GET <host> / User/2019. Here 2019 is a path parm.
			e.) Request Param : More parameters are passed.
				-> PATH param vs Request Param : Path Param used for ids that revolve around entities. Ids of any table. Request Param have no scope defined and anything can be passed.
			-> Here if we want to create mulltiple apis of same type on the same entity we can have apis like :
			GET / user/{user_id}
			GET / user
			GET / user / {user_id}/{customer_id}
		2.) REST APIs are stateless : Every Request should be self sufficent. Every request should be an individual request and it should not assume or depend on anything. Example : ASume mulltiple servers of 1 service. USer does a login request and goes to 1 server and server generates token and keeps it on same server. Now in the next instant the request goes to the another server now we should not have to login one more time the token should be sent here also.
		
		3.) 1 API should not have 1:1 mapping with DB : The api can interact with more than 1 table in the service layer.
		
		4.) Data Interaction : request and response can be in multiple formats. Request can be JSON, XML, protbuff. Response can be in JSON, XML, protbuff. Any combinataions of both can be 
		
	-> CRUD APIs are most commonly used APIs in any application 


-> Protobuf : 
	-> Protocol Buffers is a free open source cross platform data format used to serialize structured data.
	-> It is light weight and faster than JSON and XML.
	-> Binary transfer format : Data is transfered as binary 
	-> Seperation of context and data is possible which is not possible in JSON and XML.
	-> Need to write a proto file to define the schema of the protobuf.
	-> You need to convert the proto file to language specific output. Need to protobuf compiler
	-> Advantages :
		-> Allows us to define a schema for the data that needs to be transfered.
		-> Required, Repeated and optional keywords allow validations and are extensible
		
		
-> SOAP and REST APIs :
	-> SOAP and ReST are 2 different approaches to API design. SOAP is highly structured and uses XML. ReST can have multiple formats.
	-> Similarities between SOAP and REST :
		-> Both can be used to build APIs used between diverse application. 
		-> Both can be used to make, process and respond to data request from other applications
		-> Both use HTTP to exchange information
		-> Both use SSL/TLS for secure and encrypted communication
		-> Both can be used to build secure, scalable and fault tolerant distributed systems.
	-> Choosing between SOAP and REST :
		-> Mordern systems using mordern architecture patterns like microservices prefer REST due to its flexibility and scalability. SOAP is prefered for legacy systems.
		-> SOAP APIs have tighter WS Security which is preferable for private APIs while public APIs needing less security prefer Rest due to more flexibility
		-> SOAP inherently is more suited to high data integrity requirements that comply with ACID properties. Rest may require additional software module to enforce ACID properties.
		
	How Does SOAP work ?
		-> SOAP requires strict communication contract between systems.
		-> SOAP has several standards that control every aspect of data exchange. like :
			-> Web Service Security - Specifies security mesures like using unique identifiers called tokens. It adds additional header content to ensure only designated process in the specified server reads the message content.
			-> Web Service Description Language - describes scope and function of SOAP web service 
			-> WS Reliable Messaging - Standardizes error handling in SOAP messaging.
		-> SOAP APIs wrap our HTTP request in SOAP envelopes. This is a Data structure that modifies the underlying HTTP request with SOAP requirements. 
		-> Due to the envelope we can also send request to SOAP APIs using other transport protocols like TCP or ICMP.
		-> The response of SOAP APIs is always a XML document.
		
	How does REST work ?
		-> Rest imposes six conditions on how API should work :
			-> Client-Server Architecture : Sender and Receiver are independent of each other regarding techology, language, etc.
			-> Layered - Served can have several intermediateries that can work together to handle client request while being invisible to the client.
			-> Uniform Interface - API returns data in standard format that is complete and fully useable
			-> Stateless - Each API request is independent of previous or future requests.
			-> Code on Demand - API response can include a code snippet if required
			-> Cachable - All API responses are cacheable.
		-> Requests are sent using HTTP verbs like - GET,POST,PUT,PATCH while response can be XML,JSON,etc.
		
	Difference between SOAP and REST :
		-> Design Difference : SOAP API exposes funcation names that need to be used while REST exposes a USR with HTTP verb and parameters.
		-> Flexibility - SOAP only allows XML format between applications and the server needs to be Stateful. While REST APIs are more flexible and allow application to transfer data in many formats and it is also stateless.
		-> Performance - SOAP messages are more complex and larger which makes it slower to trasmit and process. REST is faster and more efficent due to small message sizes. Rest responses are also cacheable.
		-> Scalability - SOAP requires servers to be stateful hence applications need more resources and are difficult/ expensive to scale. REST is stateless and hence cheaper/ easier to scale.
		-> Security - Rest supports HTTPs but SOAP abs WS - Security on top of HTTPS, this makes soap better/ more secure but it adds to the processing.
		Reliability - SOAP have error handling built into it using WS-RelaibleMessaging. REST needs you to retry in case of failure.
	
-> LLD of product service : 